一些重要的js基础概念

（1）函数声明与函数表达式

函数声明

如果function foo(){}被包含在一个函数体内，或者位于程序的最顶部的话，那它就是一个函数声明。函数的声明方式会得到提升，且如果有相同的函数，会覆盖。

函数表达式

如果function foo(){}是作为赋值表达式的一部分的话，那它就是一个函数表达式。

还有一种函数表达式就是被括号括住的(function foo(){})或者函数前加！等符号。

var bar = function foo(){}; // 表达式，因为它是赋值表达式的一部分
new function bar(){}; // 表达式，因为它是new表达式
(function foo(){}); // 函数表达式：包含在分组操作符内
1
2
3
1
2
3
区别

函数声明会在任何表达式被解析和求值之前先被解析和求值，即使你的声明在代码的最后一行，它也会在同作用域内第一个表达式之前被解析/求值 
函数声明在条件语句内虽然可以用，但是没有被标准化，也就是说不同的环境可能有不同的执行结果，所以这样情况下，最好使用函数表达式

（2）作用域

JavaScript语言的作用域仅存在于函数范围中。这是必须要牢记的一点，还有一点重要的就是作用域的提升规则。

传统的类C，Java,它们的作用域是块级作用域(block-level scope)， 花括号就是一个作用域。但是对于JavaScript作用域是函数级作用域(function-level scope)，比如if条件语句，就不算一个独立的作用域。

在JavaScript中，每个函数被调用时都会创建一个全新的上下文环境。因此，在函数内部定义的变量和函数就只能在函数内部访问，在外部无法访问，那么在该上下文环境中，调用的函数就提供了一个非常方便的方式来创建私有成员。也就是解释了JavaScript的作用域是function-level。

变量提升

对JavaScript解释器而言，所有的函数和变量声明都会被提升到最前面, 并且变量声明永远在前面，赋值在声明过程之后

函数的声明方式主要由两种：声明式和变量式。

function foo1(){} //声明式

var a = function foo2() {} //变量式
1
2
3
1
2
3
声明式会自动将声明放在前面并且执行赋值过程。而变量式则是先将声明提升，然后到赋值处再执行赋值

带有命名的函数变量式声明，是不会提升到作用域范围内的，比如:

var baz = function spam() {};
baz(); // vaild
spam(); // ReferenceError "spam is not defined"
1
2
3
4
1
2
3
4
tips: 
任何时候，请使用var声明变量, 并放置在作用域的顶端.

推荐使用JSLint工具帮助验证js语法的规范。

